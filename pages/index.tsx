import Head from "next/head";
import type { NextPage } from "next";
import { useScroll } from "framer-motion";
import { useRef, useState, useEffect } from "react";

import {
  fetchYTVideoContent,
  fetchYTChannelContent,
  fetchYTChannelPlayListItems,
} from "../services/ytService";
import {
  fetchArtistTopTracks,
  generateSpotifyAccessToken,
} from "../services/spotifyService";
import Cookies from "universal-cookie";
import { GenericAxiosError } from "../types";
import SpotifyTrack from "../types/SpotifyTrack";
import IndexISRProps from "../types/IndexISRProps";
import ToolBar from "../components/Utilities/ToolBar";
import YTVideoResponse from "../types/YTVideoResponse";
import HeroMessage from "../components/Utilities/HeroMessage";
import appBgTexture from "../assets/images/hero_bg_texture.svg";
import AboutMeSection from "../components/Utilities/AboutMeSection";
import SkillsetSection from "../components/Utilities/SkillsetSection";
import PortfolioSection from "../components/Utilities/PortfolioSection";
import MainSectionsWrapper from "../components/Interfaces/MainSectionsWrapper";
import IllustrativeExpressions from "../components/Utilities/IllustrativeExpressions";

const cookies = new Cookies();

const Home: NextPage<IndexISRProps> = (props) => {
  const { scrollYProgress } = useScroll();
  const [yPercent, setYPercent] = useState<number>(0);

  const contentClasses = "z-10 w-3/5 relative";
  const portfolioSectionRef = useRef<HTMLDivElement>(null);
  const skillSetSectionRef = useRef<HTMLDivElement>(null);
  const aboutMeSectionRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    scrollYProgress.onChange((currentYFraction) => {
      if (currentYFraction <= 0.08) {
        setYPercent(currentYFraction);
      }
    });
  }, [setYPercent, scrollYProgress]);

  return (
    <div
      style={{
        backgroundImage: `url(${appBgTexture.src})`,
        backgroundSize: `${yPercent >= 0.005 ? "0%" : "cover"}`,
      }}
      className="relative w-[calc(100vw_-_0.5rem)] min-h-screen flex flex-col items-center bg-no-repeat bg-fixed bg-right-top"
    >
      <Head>
        <title>Subhasish Music</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ToolBar />
      <main className="w-[77vw] relative flex flex-col items-center">
        <MainSectionsWrapper className={`${contentClasses} h-screen`}>
          <HeroMessage />
        </MainSectionsWrapper>
        <MainSectionsWrapper
          ref={portfolioSectionRef}
          className={`${contentClasses} h-fit`}
        >
          <PortfolioSection {...props} />
        </MainSectionsWrapper>
        <MainSectionsWrapper
          ref={skillSetSectionRef}
          className={`${contentClasses} h-fit`}
        >
          <SkillsetSection />
        </MainSectionsWrapper>
        <MainSectionsWrapper ref={aboutMeSectionRef} className="w-full h-fit">
          <AboutMeSection />
        </MainSectionsWrapper>
        <section className="fixed top-0 z-20 right-[4vw] w-2/5 h-screen flex justify-center items-center overflow-hidden">
          <IllustrativeExpressions
            youTubeRef={portfolioSectionRef}
            skillSetRef={skillSetSectionRef}
            aboutMeRef={aboutMeSectionRef}
          />
        </section>
      </main>
    </div>
  );
};

export async function getStaticProps() {
  let ytVideos: YTVideoResponse[] = [];
  let spotifyTracks: SpotifyTrack[] = [];

  const setSortedSpotifyTracks = (tracks: SpotifyTrack[]) => {
    const sortedTracks = tracks.sort((t1, t2) => {
      return (t1?.popularity ?? 0) - (t2?.popularity ?? 0);
    });
    spotifyTracks = sortedTracks.slice(0, 9);
  };

  const onArtistTopTrackFetch = async () => {
    try {
      const topTracksResponse = await fetchArtistTopTracks();
      setSortedSpotifyTracks([...topTracksResponse.data.tracks]);
    } catch (err) {
      console.log(err);
    }
  };

  const onSpotifyTokenGeneration = async () => {
    try {
      const accessTokenResponse = await generateSpotifyAccessToken();
      cookies.set("_spaToken", accessTokenResponse.data.access_token, {
        secure: true,
      });
      onArtistTopTrackFetch();
    } catch (err) {}
  };

  // try {
  //   const ytChannelResponse = await fetchYTChannelContent();
  //   const uploadPlayListId =
  //     ytChannelResponse.data.items[0].contentDetails.relatedPlaylists.uploads;
  //   const playListContent = await fetchYTChannelPlayListItems(uploadPlayListId);
  //   const videoIds = playListContent.data.items
  //     .map((vidContent) => vidContent.contentDetails.videoId)
  //     .join(",");
  //   const ytVideosData = await fetchYTVideoContent(videoIds);
  //   ytVideos = [...ytVideosData.data.items];
  // } catch (err) {
  //   console.log(err);
  // }

  // try {
  //   const topTracksResponse = await fetchArtistTopTracks();
  //   setSortedSpotifyTracks([...topTracksResponse.data.tracks]);
  // } catch (err: GenericAxiosError | any) {
  //   const statusCode = err?.response?.data?.error?.status;
  //   if (statusCode >= 400 && statusCode <= 599) {
  //     onSpotifyTokenGeneration();
  //   }
  // }

  return {
    props: {
      ytVideos,
      spotifyTracks,
    },
    revalidate: 3600 * 24,
  };
}

export default Home;
